@GuideBook(title: "Organizing with Grids", icon: title.png, background: titleBackground.png) {
    @WelcomeMessage(title: "Organizing with Grids") {
        This sample shows you how to arrange content using a grid view, and how to use a [state variable](glossary://state%20value) to track the selection of a color in that grid.
    }
    @Guide {
        @Step(title: "Organizing with Grids") {
            @ContentAndMedia {
                ![](intro.png)  

                Welcome to the Organizing with Grids sample. This sample shows how to arrange content using a grid view, and how to use a [state variable](glossary://state%20value) to track the selection of a color in that grid.
            
                @GuideButton(type: walkthrough, title: "Start Walkthrough", description: "AX description for button")
            }
            @Task(type: walkthrough, title: "Configuring the App", id: "colorGridApp", file: ColorGridApp.swift) {  
                Learn the basics of building and configuring an app with [SwiftUI](glossary://SwiftUI).
                
                @Page(id: "1.app", title: "Configuring the App") {
                    Before diving into the grid, take a look at how this code gets made into an app. Your `ColorGridApp` follows a set of guidelines created by the [App](doc://com.apple.documentation/documentation/swiftui/app) [protocol](glossary://protocol). This allows your project to run and behave just like any other app.
                }
                @Page(id: "1.entryPoint", title: "Configuring the App") {
                    The code marks `ColorGridApp` with `@main`, making it the entry point of the program — the code the app starts running first.
                }
                @Page(id: "1.body", title: "Configuring the App") {
                    When your app runs, it displays whatever content you place in the `body` property. Notice that this `body` creates the `ContentView`. When the app launches, it fills the screen with this [view](glossary://view). 
                }
                @Page(id: "1.contentView", title: "Configuring the App") {
                    When you create a new app, `ContentView` is your [top-level view](glossary://top-level%20view) by default. This is useful because you can go to `ContentView` to see how an app’s [views](glossary://view) are put together. However, because the name of this view could change, look in the `body` property of the app definition if you’re ever unsure what the top-level view of an app is.
                }
            }
            @Task(type: walkthrough, title: "Creating a Grid", id: "contentView", file: ContentView.swift) {
                Explore how to create and fill the grid view with colored rectangles.
                
                @Page(id: "2.contentView", title: "Creating a Grid") {
                    This is the `ContentView`. It creates a grid of rounded rectangles, each a different color. `ContentView` is a `View`, so it can contain any number of other [views](glossary://view) inside of it. The grid is one of those views.
                }
                @Page(id: "2.allColors", title: "Creating a Grid") {
                    To populate the grid with different colors, you’ll use the `allColors` [variable](glossary://variable) to store an [array](glossary://array) of color values. The grid [iterates](glossary://iteration) over this array and adds a rectangular button for each color in the array.
                }
                @Page(id: "2.body", title: "Creating a Grid") {
                    You’ll add any code that defines a [view](glossary://view) to the view’s [body](glossary://body). You’ll [define](glossary://define) any [variables](glossary://variable) that `ContentView` needs outside of its `body`.
                }
                @Page(id: "2.vStack", title: "Creating a Grid") {
                    The first view inside `ContentView` is a [VStack](doc://com.apple.documentation/documentation/swiftui/vstack), which arranges its views vertically, with some text above the grid.
                }
                @Page(id: "2.scrollView", title: "Creating a Grid") {
                    The grid might contain more items than it can display at one time, so the code wraps it in a [ScrollView](doc://com.apple.documentation/documentation/swiftui/scrollview) to scroll the content vertically, if necessary.
                }
                @Page(id: "2.lazyVGrid", title: "Creating a Grid") {
                    Inside the `ScrollView`, you create a grid view using [LazyVGrid](doc://com.apple.documentation/documentation/swiftui/lazyvgrid). The grid is “lazy” because it doesn’t create its grid items until they are needed. `LazyVGrid` takes an argument for `columns` which determines how many columns show up in the grid.
                }
                @Page(id: "2.columnLayout", title: "Creating a Grid") {
                    The value assigned to `columnLayout` specifies a three-column grid. You can change this value any time you want.
                }
                @Page(id: "2.gridForEach", title: "Creating a Grid") {
                    Inside the `LazyVGrid`, you define each item for the grid to display. To do this, you use a `ForEach` loop to [iterate](glossary://iteration) over the [indices](glossary://index) of the `allColors` [array](glossary://array).
                }
                @Page(id: "2.gridElement", title: "Creating a Grid") {
                    Each item in the grid is a [Button](doc://com.apple.documentation/documentation/swiftui/button) view, and each button has an action (something that happens when you tap it), and a label (text or an image that tells people what the button does, like "Save" to save a file).
                }
                @Page(id: "2.gridLabel", title: "Creating a Grid") {
                    The label for the button uses a [RoundedRectangle](doc://com.apple.documentation/documentation/swiftui/roundedrectangle/) view and sets its foreground color to a value from the `allColors` array using the current index of the `ForEach` loop.
                }
            }
            @Task(type: walkthrough, title: "Using a State Variable", id: "stateVariable", file: ContentView.swift) {
                Investigate how SwiftUI changes the appearance of a view.
                
                @Page(id: "3.stateVar", title: "Using a State Variable") {
                    If you tap a color in the grid, you’ll notice that the text element on top of the grid changes color.
                }
                @Page(id: "3.stateVar", title: "Using a State Variable") {
                    You add `@State` before a variable to tell SwiftUI to manage the storage for a value. When the value changes, SwiftUI updates any parts of the view that use the value. The [state variable](glossary://state%20value) `selectedColor` tracks the most recently selected color, which the text at the top of the view uses for its foreground color.
                }
                @Page(id: "3.selectedColor", title: "Using a State Variable") {
                    The [Text](doc://com.apple.documentation/documentation/swiftui/text) view uses `selectedColor` for its foreground color. Because `selectedColor` is a [state variable](glossary://state%20value), whenever the state changes, SwiftUI changes the color of this text.
                }
                @Page(id: "3.colorChange", title: "Using a State Variable") {
                    When you tap a grid element, the `selectedColor` value changes to that element’s color, which also changes the color of the text.
                }
            }
        }
    }
}
